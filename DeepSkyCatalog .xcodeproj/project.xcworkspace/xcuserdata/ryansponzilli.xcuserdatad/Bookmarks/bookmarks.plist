<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>28</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>27</string>
					<key>Timestamp</key>
					<string>725581697.591971</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Logic/DailyReport.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            // Remove all targets with a meridian score less than 50%
</string>
				<key>leading</key>
				<string>            var targets = DeepSkyTargetList.whitelistedTargets(hiddenTargets: targetSettings.hiddenTargets ?? [])
            
</string>
				<key>trailing</key>
				<string>            // ** Need to account for edge cases where meridian score doesn't effect visibility at extreme declinations
            targets.filterBySeasonScore(0.5, location: location, date: date, sunData: sunData)
            
</string>
			</dict>
			<key>title</key>
			<string>Need to account for edge cases where meridian score doesn't effect visibility at extreme declinations</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>30</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>29</string>
					<key>Timestamp</key>
					<string>725431517.360909</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>DeepSkyCatalogiOS/Views/DataLoadingViews.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                store.sunData = Sun.sol.getNextInterval(location: store.location, date: store.date)
</string>
				<key>leading</key>
				<string>            // Calculate sunData on a background thread
            .task {
</string>
				<key>trailing</key>
				<string>                // If its in the morning hours of the next day, still show the info for the previous day (current night)
                if Sun.sol.getAltitude(location: store.location, time: .now) &lt; -18 &amp;&amp; .now &gt; store.sunData.solarMidnight {
                    store.date = store.date.yesterday()
</string>
			</dict>
			<key>title</key>
			<string>Test this</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>123</string>
					<key>EndingLineNumber</key>
					<string>133</string>
					<key>StartingColumnNumber</key>
					<string>112</string>
					<key>StartingLineNumber</key>
					<string>133</string>
					<key>Timestamp</key>
					<string>726340539.503813</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Logic/DeepSkyTarget/FilterMethods.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>limitingAlt</string>
				<key>leading</key>
				<string>    
    /// FILTER BY VISIBILITY SCORE
    func filteredByVisibility(min: Double, location: Location, viewingInterval: DateInterval, sunData: SunData, </string>
				<key>trailing</key>
				<string>: Double) -&gt; Self {
        return self.filter() {
            return $0.getVisibilityScore(at: location, viewingInterval: viewingInterval, limitingAlt: limitingAlt) &gt;= min
</string>
			</dict>
			<key>title</key>
			<string>sundata parameter not necessary</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>126</string>
					<key>EndingLineNumber</key>
					<string>52</string>
					<key>StartingColumnNumber</key>
					<string>115</string>
					<key>StartingLineNumber</key>
					<string>52</string>
					<key>Timestamp</key>
					<string>726340591.124676</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Logic/DeepSkyTarget/SortMethods.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>limitingAlt</string>
				<key>leading</key>
				<string>        
    func sortedByVisibility(location: Location, viewingInterval: DateInterval, sunData: SunData, limitingAlt: Double) -&gt; Self {
        return self.sorted(by: {$0.getVisibilityScore(at: location, viewingInterval: viewingInterval, limitingAlt: </string>
				<key>trailing</key>
				<string>) &gt; $1.getVisibilityScore(at: location, viewingInterval: viewingInterval, limitingAlt: limitingAlt)})
    }
    
</string>
			</dict>
			<key>title</key>
			<string>sundata parameter not necessary</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
